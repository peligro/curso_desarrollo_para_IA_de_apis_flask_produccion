name: Flask CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Variables Flask
      FLASK_PORT: ${{ secrets.FLASK_PORT }}
      FLASK_DEBUG: ${{ secrets.FLASK_DEBUG }}
      FLASK_KEY: ${{ secrets.FLASK_KEY }}
      
      # APIs de IA
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      PINECONE_API_INDEX: ${{ secrets.PINECONE_API_INDEX }}
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      PERPLEXITY_BASE_URL: ${{ secrets.PERPLEXITY_BASE_URL }}
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      CLAUDE_BASE_URL: ${{ secrets.CLAUDE_BASE_URL }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_API_URL: ${{ secrets.OPENAI_API_URL }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      DEEPSEEK_API_URL: ${{ secrets.DEEPSEEK_API_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_URL: ${{ secrets.GEMINI_BASE_URL }}
      MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      MISTRAL_BASE_URL: ${{ secrets.MISTRAL_BASE_URL }}
      OLLAMA_BASE_URL: ${{ secrets.OLLAMA_BASE_URL }}
      
      # AWS/Localstack
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SECRET_ACCESS_URL: ${{ secrets.AWS_SECRET_ACCESS_URL }}
      AWS_BUCKET_URL: ${{ secrets.AWS_BUCKET_URL }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
      
      # EC2
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Despliegue en EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/proyecto
            
            # hacemos pull a la rama main ...  
            echo "Pulling latest code from main branch..."
            git fetch origin main
            git reset --hard origin/main

            
            

            # Cree un .env nuevo en la carpeta laravel a partir del ejemplo
            echo "creando archivo .env..."
            
            cp .env.example .env.template
            
            # Eliminar variables que serán reemplazadas
            grep -v "^FLASK_PORT=" .env.template | \
            grep -v "^FLASK_DEBUG=" | \
            grep -v "^FLASK_KEY=" | \
            grep -v "^PINECONE_API_KEY=" | \
            grep -v "^PINECONE_API_INDEX=" | \
            grep -v "^PERPLEXITY_API_KEY=" | \
            grep -v "^PERPLEXITY_BASE_URL=" | \
            grep -v "^CLAUDE_API_KEY=" | \
            grep -v "^CLAUDE_BASE_URL=" | \
            grep -v "^OPENAI_API_KEY=" | \
            grep -v "^OPENAI_API_URL=" | \
            grep -v "^DEEPSEEK_API_KEY=" | \
            grep -v "^DEEPSEEK_API_URL=" | \
            grep -v "^GEMINI_API_KEY=" | \
            grep -v "^GEMINI_BASE_URL=" | \
            grep -v "^MISTRAL_API_KEY=" | \
            grep -v "^MISTRAL_BASE_URL=" | \
            grep -v "^OLLAMA_BASE_URL=" | \
            grep -v "^ENVIRONMENT=" | \
            grep -v "^AWS_REGION=" | \
            grep -v "^AWS_ACCESS_KEY_ID=" | \
            grep -v "^AWS_SECRET_ACCESS_KEY=" | \
            grep -v "^AWS_SECRET_ACCESS_URL=" | \
            grep -v "^AWS_BUCKET_URL=" | \
            grep -v "^AWS_BUCKET=" > .env.clean
            
            # Añade las variables correctas
            {
              cat .env.clean
              echo "FLASK_PORT=${{ secrets.FLASK_PORT }}"
              echo "FLASK_DEBUG=${{ secrets.FLASK_DEBUG }}"
              echo "FLASK_KEY=${{ secrets.FLASK_KEY }}"
              echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}"
              echo "PINECONE_API_INDEX=${{ secrets.PINECONE_API_INDEX }}"
              echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}"
              echo "PERPLEXITY_BASE_URL=${{ secrets.PERPLEXITY_BASE_URL }}"
              echo "CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}"
              echo "CLAUDE_BASE_URL=${{ secrets.CLAUDE_BASE_URL }}"
              echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
              echo "OPENAI_API_URL=${{ secrets.OPENAI_API_URL }}"
              echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}"
              echo "DEEPSEEK_API_URL=${{ secrets.DEEPSEEK_API_URL }}"
              echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
              echo "GEMINI_BASE_URL=${{ secrets.GEMINI_BASE_URL }}"
              echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}"
              echo "MISTRAL_BASE_URL=${{ secrets.MISTRAL_BASE_URL }}"
              echo "OLLAMA_BASE_URL=${{ secrets.OLLAMA_BASE_URL }}"
              echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}"
              echo "AWS_REGION=${{ secrets.AWS_REGION }}"
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              echo "AWS_SECRET_ACCESS_URL=${{ secrets.AWS_SECRET_ACCESS_URL }}"
              echo "AWS_BUCKET_URL=${{ secrets.AWS_BUCKET_URL }}"
              echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}"
            } | awk '!seen[$0]++' | grep -v "^$" | grep -v "^#" > .env
            
            # Limpiar archivos temporales   
            rm -f .env.template .env.clean
            
            # Mostrar el contenido final del .env para depuración
            echo "Final .env content (relevant variables):"
            grep -E "^(APP_|DB_)" .env
            echo "---"
            echo "Total lines in .env:"
            wc -l .env
            
           
            
            
            echo "Detener y limpiar contenedores Docker..."
            docker compose down || true
            docker system prune --all --force || true
            docker volume prune --force || true

            # Construir e iniciar contenedores
            echo "Construcción y puesta en marcha de contenedores..."
            docker compose up --build -d
            
            echo "Esperando a que los contenedores estén listos..."
            sleep 5
            
            echo "¡Implementación completada exitosamente!!!!"